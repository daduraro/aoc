#include "aoc/solver.h"

#include <iostream>
#include <regex>
#include <string>
#include <vector>
#include <array>
#include <algorithm>
#include <numeric>
#include <iterator>
#include <limits>
#include <type_traits>
#include <memory>
#include <cassert>

namespace {
    using namespace aoc;
    
    constexpr std::size_t YEAR = ...;
    constexpr std::size_t DAY  = ...;
    using input_t = ...;

    input_t parse_input(std::istream& is)
    {
        // ...
        return {};
    }

    auto resultA(const input_t& in) noexcept -> std::optional<std::size_t>
    {
        // ...
        return std::nullopt;
    }

    auto resultB(const input_t& in) noexcept -> std::optional<std::size_t>
    {
        // ...
        return std::nullopt;
    }
}

namespace aoc {
    template<>
    auto create_solver<YEAR, DAY>() noexcept -> std::unique_ptr<solver_interface> {
        return create_solver<YEAR, DAY>(parse_input, resultA, resultB);
    }
}